generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Diamond {
  id             String   @id @default(uuid())
  stockId        String   @unique @map("stock_id")
  certificateNo  String   @map("certificate_no")
  shape          String
  size           Float
  color          String
  clarity        String
  cut            String?
  polish         String
  sym            String
  floro          String
  lab            String
  rapPrice       Float    @map("rap_price")
  rapAmount      Float    @map("rap_amount")
  discount       Float
  pricePerCarat  Float    @map("price_per_carat")
  finalAmount    Float    @map("final_amount")
  measurement    String
  length         Float?
  width          Float?
  height         Float?
  depth          Float?
  table          Float?
  ratio          Float?
  status         String
  comment        String?
  videoUrl       String?  @map("video_url")
  imageUrl       String?  @map("image_url")
  certUrl        String?  @map("cert_url")
  girdle         String?
  culet          String?
  cAngle         Float?   @map("c_angle")
  cHeight        Float?   @map("c_height")
  pAngle         Float?   @map("p_angle")
  pDepth         Float?   @map("p_depth")
  fancyIntensity String?  @map("fancy_intensity")
  fancyOvertone  String?  @map("fancy_overtone")
  fancyColor     String?  @map("fancy_color")
  location       String?
  inscription    String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("diamonds")
}

model SyncLog {
  id        String   @id @default(uuid())
  status    String
  message   String?
  count     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("sync_logs")
}


model AdminEmail {
  email     String   @id
  createdAt DateTime @default(now()) @map("created_at")

  @@map("admin_emails")
}


model Remark {
  id          String   @id @default(uuid())
  content     String
  shipmentId  String
  userId      String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id])
  shipment    Shipment @relation(fields: [shipmentId], references: [id])

  @@map("remarks")
}

// Update Shipment model to include remarks relation
model Shipment {
  id                  String   @id @default(uuid())
  companyName         String
  ownerName           String?  // This should be here
  addressLine1        String
  addressLine2        String?
  country             String
  state               String
  city                String
  postalCode          String
  phoneNo             String
  faxNo               String?
  email               String
  website             String?
  paymentTerms        String
  carrier             String
  organizationType    String   @map("organization_type")
  businessType        String   @map("business_type")
  businessRegNo       String   @map("business_reg_no")
  panNo               String   @map("pan_no")
  sellerPermitNo      String?  @map("seller_permit_no")
  cstTinNo            String?  @map("cst_tin_no")
  tradeBodyMembership String[] @map("trade_body_membership")
  referenceType       String   @map("reference_type")
  referenceNotes      String?  @map("reference_notes")
  references          Json[]   @map("references")
  authorizedBy        String   @map("authorized_by")
  accountManager      String   @map("account_manager")
  brokerName          String?  @map("broker_name")
  partyGroup          String   @map("party_group")
  salesExecutive      String   @map("sales_executive")
  invoices            Invoice[]
  remarks             Remark[] // Add this line
  leadSource          String   @map("lead_source")
  limit               Float    @default(0) @map("limit")
  lastUpdatedBy       String?  @map("last_updated_by")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  userId              String
  createdBy           User     @relation(fields: [userId], references: [id])

  @@map("shipments")
}

// Update User model to include remarks relation
model User {
  id                 String              @id @default(uuid())
  name               String
  email              String              @unique
  phone              String
  password           String
  otp                String?
  verified           Boolean             @default(false)
  role               Role                @default(customer)
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  performanceReports PerformanceReport[]
  salesEntries       SalesEntry[]
  shipments          Shipment[]
  invoices           Invoice[]
  remarks            Remark[] // Add this line

  @@map("users")
}

model ChatMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  message   String
  status    String   @default("pending")
  createdAt DateTime @default(now())

  @@map("chat_messages")
}

model SalesEntry {
  id             String   @id @default(uuid())
  employeeId     String
  carat          Float?
  color          String?
  clarity        String?
  cut            String?
  totalSaleValue Float?
  totalProfit    Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  companyName    String?
  description    String?
  isNoSale       Boolean  @default(false)
  saleDate       DateTime @default(now())
  employee       User     @relation(fields: [employeeId], references: [id])

  @@map("sales_entries")
}

model PerformanceReport {
  id                   String   @id @default(uuid())
  userId               String
  totalCalls           Int
  totalEmails          Int
  requirementsReceived Int
  memo                 String?
  invoice              String?
  date                 DateTime @default(now())
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  user                 User     @relation(fields: [userId], references: [id])

  @@map("performance_reports")
}

model ParcelGoods {
  id        String   @id @default(uuid())
  sieve     String
  price     Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("parcel_goods")
}

model Invoice {
  id            String   @id @default(uuid())
  invoiceNo     String   @unique // Format: CD-XXXXA/DDMM
  date          DateTime @default(now())
  paymentTerms  Int // in days
  dueDate       DateTime
  description   String
  carat         Float
  color         String
  clarity       String
  lab           String
  reportNo      String
  pricePerCarat Float
  totalAmount   Float
  amountInWords String
  companyName   String
  addressLine1  String
  addressLine2  String?
  country       String
  state         String
  city          String
  postalCode    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     User     @relation(fields: [userId], references: [id])
  userId        String
  shipmentId    String
  shipment      Shipment @relation(fields: [shipmentId], references: [id])

  @@map("invoices")
}


enum Role {
  admin
  employee
  customer
}
