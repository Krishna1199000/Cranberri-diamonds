// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  employee
  customer
}

model Diamond {
  id             String   @id @default(uuid())
  stockId        String   @unique @map("stock_id")
  certificateNo  String   @map("certificate_no")
  shape          String
  size           Float
  color          String
  clarity        String
  cut            String?
  polish         String
  sym            String
  floro          String
  lab            String
  rapPrice       Float    @map("rap_price")
  rapAmount      Float    @map("rap_amount")
  discount       Float
  pricePerCarat  Float    @map("price_per_carat")
  finalAmount    Float    @map("final_amount")
  measurement    String
  length         Float?
  width          Float?
  height         Float?
  depth          Float?
  table          Float?
  ratio          Float?
  status         String
  comment        String?
  videoUrl       String?  @map("video_url")
  imageUrl       String?  @map("image_url")
  certUrl        String?  @map("cert_url")
  girdle         String?
  culet          String?
  cAngle         Float?   @map("c_angle")
  cHeight        Float?   @map("c_height")
  pAngle         Float?   @map("p_angle")
  pDepth         Float?   @map("p_depth")
  fancyIntensity String?  @map("fancy_intensity")
  fancyOvertone  String?  @map("fancy_overtone")
  fancyColor     String?  @map("fancy_color")
  location       String?
  inscription    String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("diamonds")
}

model SyncLog {
  id        String   @id @default(uuid())
  status    String
  message   String?
  count     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("sync_logs")
}

// Update User model to include the relation
model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  phone        String
  password     String
  otp          String?
  verified     Boolean       @default(false)
  role         Role          @default(customer)
  shipments    Shipment[]
  salesEntries SalesEntry[]  // Add this line
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@map("users")
}

model AdminEmail {
  email     String   @id
  createdAt DateTime @default(now()) @map("created_at")

  @@map("admin_emails")
}

model Shipment {
  id                  String   @id @default(uuid())
  companyName         String
  addressLine1        String
  addressLine2        String?
  country            String
  state              String
  city               String
  postalCode         String
  phoneNo            String
  faxNo              String?
  email              String
  website            String?
  paymentTerms       String
  carrier            String
  organizationType   String   @map("organization_type")
  businessType       String   @map("business_type")
  businessRegNo      String   @map("business_reg_no")
  panNo              String   @map("pan_no")
  sellerPermitNo     String?  @map("seller_permit_no")
  cstTinNo           String?  @map("cst_tin_no")
  tradeBodyMembership String[] @map("trade_body_membership")
  referenceType      String   @map("reference_type")
  referenceNotes     String?  @map("reference_notes")
  references         Json[]   @map("references")
  authorizedBy       String   @map("authorized_by")
  accountManager     String   @map("account_manager")
  brokerName         String?  @map("broker_name")
  partyGroup         String   @map("party_group")
  salesExecutive     String   @map("sales_executive")
  leadSource         String   @map("lead_source")
  limit              Float    @default(0) @map("limit")
  lastUpdatedBy      String?  @map("last_updated_by")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  createdBy          User     @relation(fields: [userId], references: [id])
  userId             String

  @@map("shipments")
}
model ChatMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  message   String
  status    String   @default("pending") // pending or completed
  createdAt DateTime @default(now())

  @@map("chat_messages")
}
model SalesEntry {
  id              String   @id @default(uuid())
  employeeId      String
  employee        User     @relation(fields: [employeeId], references: [id])
  companyName     String?  // Made optional for no-sale entries
  carat           Float?   // Made optional for no-sale entries
  color           String?  // Made optional for no-sale entries
  clarity         String?  // Made optional for no-sale entries
  cut             String?  // Made optional for no-sale entries
  totalSaleValue  Float?   // Made optional for no-sale entries
  totalProfit     Float?   // Made optional for no-sale entries
  description     String?  // New field for descriptions
  isNoSale        Boolean  @default(false) // New field for no-sale indicator
  saleDate        DateTime @default(now()) // New field for sale date
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("sales_entries")
}
