generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Diamond {
  id             String   @id @default(uuid())
  stockId        String   @unique @map("stock_id")
  certificateNo  String   @map("certificate_no")
  shape          String
  size           Float
  color          String
  clarity        String
  cut            String?
  polish         String
  sym            String
  floro          String
  lab            String
  rapPrice       Float    @map("rap_price")
  rapAmount      Float    @map("rap_amount")
  discount       Float
  pricePerCarat  Float    @map("price_per_carat")
  finalAmount    Float    @map("final_amount")
  measurement    String
  length         Float?
  width          Float?
  height         Float?
  depth          Float?
  table          Float?
  ratio          Float?
  status         String
  comment        String?
  videoUrl       String?  @map("video_url")
  imageUrl       String?  @map("image_url")
  certUrl        String?  @map("cert_url")
  girdle         String?
  culet          String?
  cAngle         Float?   @map("c_angle")
  cHeight        Float?   @map("c_height")
  pAngle         Float?   @map("p_angle")
  pDepth         Float?   @map("p_depth")
  fancyIntensity String?  @map("fancy_intensity")
  fancyOvertone  String?  @map("fancy_overtone")
  fancyColor     String?  @map("fancy_color")
  location       String?
  inscription    String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("diamonds")
}

enum DiamondStatus {
  AVAILABLE
  HOLD
  MEMO
  SOLD
}

enum SyncStatus {
  STARTED
  COMPLETED
  FAILED
  STOPPING
  CANCELLED
  COMPLETED_WITH_ERRORS
  UNKNOWN
}

model SyncLog {
  id        String   @id @default(uuid())
  status    SyncStatus @default(UNKNOWN)
  message   String?
  count     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("sync_logs")
}

model AdminEmail {
  email     String   @id
  createdAt DateTime @default(now()) @map("created_at")

  @@map("admin_emails")
}

model Remark {
  id         String   @id @default(uuid())
  content    String
  shipmentId String
  userId     String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  shipment   Shipment @relation(fields: [shipmentId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("remarks")
}

model Shipment {
  id                  String    @id @default(uuid())
  companyName         String
  addressLine1        String
  addressLine2        String?
  country             String
  state               String
  city                String
  postalCode          String
  phoneNo             String
  faxNo               String?
  email               String
  website             String?
  paymentTerms        String
  carrier             String
  organizationType    String    @map("organization_type")
  businessType        String    @map("business_type")
  businessRegNo       String    @map("business_reg_no")
  panNo               String    @map("pan_no")
  sellerPermitNo      String?   @map("seller_permit_no")
  cstTinNo            String?   @map("cst_tin_no")
  tradeBodyMembership String[]  @map("trade_body_membership")
  referenceType       String    @map("reference_type")
  referenceNotes      String?   @map("reference_notes")
  references          Json[]    @map("references")
  authorizedBy        String    @map("authorized_by")
  accountManager      String    @map("account_manager")
  brokerName          String?   @map("broker_name")
  partyGroup          String    @map("party_group")
  salesExecutive      String    @map("sales_executive")
  leadSource          String    @map("lead_source")
  limit               Float     @default(0) @map("limit")
  lastUpdatedBy       String?   @map("last_updated_by")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  userId              String
  ownerName           String?
  invoices            Invoice[]
  memos               Memo[]
  remarks             Remark[]
  createdBy           User      @relation(fields: [userId], references: [id])
  inventoryItems      InventoryItem[] @relation("HeldInventoryItems")

  @@map("shipments")
}

model User {
  id                 String              @id @default(uuid())
  name               String
  email              String              @unique
  phone              String
  password           String
  otp                String?
  verified           Boolean             @default(false)
  role               Role                @default(customer)
  approved           Boolean             @default(false)
  declined           Boolean             @default(false)
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  invoices           Invoice[]
  memos              Memo[]
  salesEntries       SalesEntry[]
  performanceReports PerformanceReport[]
  remarks            Remark[]
  shipments          Shipment[]
  requirements       Requirement[]
  notifications      Notification[]
  approvalRequests   CustomerApprovalRequest[]

  @@map("users")
}

model CustomerApprovalRequest {
  id        String   @id @default(uuid())
  userId    String
  status    ApprovalStatus @default(PENDING)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customer_approval_requests")
}

enum ApprovalStatus {
  PENDING
  APPROVED
  DECLINED
}

model ChatMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  message   String
  status    String   @default("pending")
  createdAt DateTime @default(now())

  @@map("chat_messages")
}

model SalesEntry {
  id              String     @id @default(uuid())
  employeeId      String
  trackingId      String?
  shipmentCarrier String?
  companyName     String?
  description     String?
  isNoSale        Boolean    @default(false)
  saleDate        DateTime   @default(now())
  totalSaleValue  Float?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  profit          Float?
  profitMargin    Float?
  purchaseValue   Float?
  paymentReceived Boolean    @default(false)
  invoiceId       String?    @map("invoice_id")
  saleItems       SaleItem[]
  employee        User       @relation(fields: [employeeId], references: [id])
  invoice         Invoice?   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model SaleItem {
  id            String     @id @default(uuid())
  salesEntryId  String
  carat         Float?
  color         String?
  clarity       String?
  certificateNo String?
  pricePerCarat Float?
  totalValue    Float?
  salesEntry    SalesEntry @relation(fields: [salesEntryId], references: [id], onDelete: Cascade)
}

model PerformanceReport {
  id                   String   @id @default(uuid())
  userId               String
  totalCalls           Int
  totalEmails          Int
  requirementsReceived Int
  memo                 String?
  invoice              String?
  date                 DateTime @default(now())
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  user                 User     @relation(fields: [userId], references: [id])

  @@map("performance_reports")
}

model ParcelGoods {
  id        String   @id @default(uuid())
  sieve     String
  price     Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("parcel_goods")
}

model Requirement {
  id           String   @id @default(uuid())
  customerName String   @map("customer_name")
  description  String
  state        String
  country      String
  isCompleted  Boolean  @default(false) @map("is_completed")
  employeeId   String   @map("employee_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  employee     User     @relation(fields: [employeeId], references: [id])

  @@map("requirements")
}

// Added Enum for Invoice/Memo type
enum InvoiceType {
  INVOICE
  MEMO
}

model Invoice {
  id            String        @id @default(uuid())
  invoiceNo     String        @unique
  type          InvoiceType   @default(INVOICE)
  date          DateTime
  dueDate       DateTime
  paymentTerms  Int
  companyName   String
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  country       String
  postalCode    String
  description   String?
  amountInWords String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  shipmentId    String?
  crPayment     Float         @default(0) @map("cr_payment")
  discount      Float         @default(0)
  shipmentCost  Float         @default(0) @map("shipment_cost")
  subtotal      Float         @default(0)
  totalAmount   Float         @default(0) @map("total_amount")
  shipment      Shipment?     @relation(fields: [shipmentId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  items         InvoiceItem[]
  notifications Notification[]
  salesEntries  SalesEntry[]
}

model InvoiceItem {
  id            String  @id @default(uuid())
  description   String
  carat         Float
  color         String
  clarity       String
  lab           String
  reportNo      String
  pricePerCarat Float
  total         Float
  invoiceId     String
  invoice       Invoice @relation(fields: [invoiceId], references: [id])
}

enum Role {
  admin
  employee
  customer
  waiting_for_approval
}

// Updated InventoryItem model
model InventoryItem {
  id            String   @id @default(uuid())
  stockId       String   @unique @map("stock_id")
  shape         String
  size          Float    // Corresponds to Carat
  color         String
  clarity       String
  cut           String?
  polish        String
  sym           String
  lab           String
  pricePerCarat Float    @map("price_per_carat")
  finalAmount   Float    @map("final_amount")
  status        DiamondStatus @default(AVAILABLE)
  videoUrl      String?  @map("video_url")
  imageUrl      String?  @map("image_url")
  certUrl       String?  @map("cert_url")
  measurement   String?  // New field: Measurement
  location      String?  // New field: Location
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Added relationship to Shipment
  heldByShipmentId String?       @map("held_by_shipment_id")
  heldByShipment   Shipment?     @relation("HeldInventoryItems", fields: [heldByShipmentId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("inventory_items")
}

model Memo {
  id            String      @id @default(uuid())
  memoNo        String      @unique // Renamed from invoiceNo
  type          InvoiceType @default(MEMO) // Changed default type
  date          DateTime
  dueDate       DateTime
  paymentTerms  Int
  companyName   String
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  country       String
  postalCode    String
  description   String?
  amountInWords String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String
  shipmentId    String?
  crPayment     Float       @default(0) @map("cr_payment")
  discount      Float       @default(0)
  shipmentCost  Float       @default(0) @map("shipment_cost")
  subtotal      Float       @default(0)
  totalAmount   Float       @default(0) @map("total_amount")
  shipment      Shipment?   @relation(fields: [shipmentId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  items         MemoItem[]

  @@map("memos") // Added map
}

model MemoItem {
  id            String @id @default(uuid())
  description   String
  carat         Float
  color         String
  clarity       String
  lab           String
  reportNo      String
  pricePerCarat Float
  total         Float
  memoId        String
  memo          Memo   @relation(fields: [memoId], references: [id], onDelete: Cascade) // Added onDelete Cascade

  @@map("memo_items") // Added map
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String   // 'payment_reminder', 'system', etc.
  title     String
  message   String
  read      Boolean  @default(false)
  invoiceId String?  // Optional reference to invoice
  dueDate   DateTime? // When this notification should be shown/relevant
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])

  @@map("notifications")
}

model EnhancedSale {
  id                    String   @id @default(uuid())
  date                  DateTime
  companyName           String   @map("company_name")
  ownerName             String   @map("owner_name")
  vendorCompany         String   @map("vendor_company")
  shape                 String
  carat                 Float
  color                 String
  clarity               String
  lab                   String
  certificateNumber     String   @map("certificate_number")
  totalPriceSoldINR     Float    @map("total_price_sold_inr")
  totalPricePurchasedINR Float   @map("total_price_purchased_inr")
  gstPercentage         Float    @default(18.0) @map("gst_percentage") // GST percentage (e.g., 18.0 for 18%)
  gstAmountINR          Float    @default(0.0) @map("gst_amount_inr") // GST amount in INR
  finalSalePriceINR     Float    @default(0.0) @map("final_sale_price_inr") // Final sale price including GST
  shippingCharge        Float    @map("shipping_charge")
  employeeProfitPercent Float    @map("employee_profit_percent")
  finalProfit           Float    @map("final_profit")
  dueDate               DateTime @map("due_date")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@map("enhanced_sales")
}

model Vendor {
  id                String   @id @default(uuid())
  companyName       String   @unique @map("company_name")
  ownerName         String   @map("owner_name")
  contactNumber     String   @map("contact_number")
  address           String
  gstNumber         String?  @map("gst_number")
  accountNumber     String   @map("account_number")
  ifscCode          String   @map("ifsc_code")
  bankName          String   @map("bank_name")
  accountHolderName String   @map("account_holder_name")
  location          String
  businessType      String   @map("business_type")
  deletedAt         DateTime? @map("deleted_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  purchases         Purchase[]
  payments          VendorPayment[]

  @@map("vendors")
}

model Purchase {
  id               String    @id @default(uuid())
  vendorId         String    @map("vendor_id")
  date             DateTime
  dueDate          DateTime? @map("due_date")
  companyName      String    @map("company_name") // seller company name
  contactPerson    String    @map("contact_person")
  mobileNumber     String    @map("mobile_number")
  shape            String
  color            String
  clarity          String
  lab              String
  certificate      String
  pricePerCaratUSD Float     @map("price_per_carat_usd")
  totalPriceUSD    Float     @map("total_price_usd")
  gstPercentage    Float     @default(0.0) @map("gst_percentage") // GST percentage (e.g., 18.0 for 18%)
  gstAmountUSD     Float     @default(0.0) @map("gst_amount_usd") // GST amount in USD
  finalPriceUSD    Float     @default(0.0) @map("final_price_usd") // Final price including GST
  usdInrRate       Float     @map("usd_inr_rate")
  inrPrice         Float     @map("inr_price")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  vendor           Vendor    @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model VendorPayment {
  id        String   @id @default(uuid())
  vendorId  String   @map("vendor_id")
  date      DateTime
  amountINR Float    @map("amount_inr")
  mode      String
  note      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_payments")
}

model Sale {
  id                  String   @id @default(uuid())
  certificateNumber   String   @map("certificate_number")
  date                DateTime
  customerName        String   @map("customer_name")
  salePriceINR        Float    @map("sale_price_inr")
  purchasePriceINR    Float?   @map("purchase_price_inr") // Manual override or auto from matched purchase
  employeePercent     Float    @default(2.0) @map("employee_percent")
  grossProfitINR      Float    @map("gross_profit_inr")
  employeeDeduction   Float    @map("employee_deduction")
  finalProfitINR      Float    @map("final_profit_inr")
  matchedPurchaseId   String?  @map("matched_purchase_id")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("sales")
}

model LedgerEntry {
  id          String      @id @default(uuid())
  date        DateTime
  type        EntryType
  amountINR   Float       @map("amount_inr")
  reason      String
  counterparty String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("ledger_entries")
}

enum EntryType {
  CREDIT
  DEBIT
}

model CardHolder {
  id           String        @id @default(uuid())
  name         String
  cardNumber   String        @map("card_number") // Will store encrypted
  last4        String        @map("last_4")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  transactions CardTransaction[]

  @@map("card_holders")
}

model CardTransaction {
  id          String     @id @default(uuid())
  cardId      String     @map("card_id")
  date        DateTime
  balance     Float      @default(0)
  usedBalance Float      @default(0) @map("used_balance")
  remainingBalance Float @default(0) @map("remaining_balance")
  dueDate     DateTime   @map("due_date")
  emiDate     DateTime   @map("emi_date")
  charges     Float      @default(0)
  status      TransactionStatus @default(ACTIVE)
  transactionType TransactionType @default(CREDIT) @map("transaction_type")
  note        String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  cardHolder  CardHolder @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("card_transactions")
}

enum TransactionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum TransactionType {
  CREDIT
  DEBIT
  ADJUSTMENT
}
